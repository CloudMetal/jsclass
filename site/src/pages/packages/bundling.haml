:textile
  h2. Bundling for deployment
  
  A common setup when using JS.Class for web development is to include the
  package loader and your package manifest using @script@ tags, then using
  @JS.require()@ to load components as you need them.
  
  <pre class="prettyprint"><script type="text/javascript" src="/js.class/loader.js"></script>
  <script type="text/javascript" src="/manifest.js"></script>
  
  <script type="text/javascript">
      JS.require('Application', function() {
          // ...
      });
  </script></pre>
  
  In this case @manifest.js@ might contain:
  
  <pre class="prettyprint">JS.Packages(function() { with(this) {
      file('http://ajax.googleapis.com/ajax/libs/jquery/1.6.1/jquery.min.js')
          .provides('jQuery');
      
      file('/app.js')
          .provides('Application')
          .requires('jQuery');
  }});</pre>
  
  This setup makes it really easy to load the JavaScript modules you need during
  development, but in production you often benefit from bundling all the
  JavaScript for a page into a single file.
  
  h3. @jsbuild@
  
  @jsbuild@ is a command-line program that's written in Node. It takes as input
  your package manifest and a list of modules you want to use, and will output
  a single JavaScript file containing those modules and all their dependencies.
  It expects to find your modules on the local filesystem and can also include
  external scripts from the web.
  
  To build a package, install JS.Class using @npm@:
  
  <pre>npm install --global js-class</pre>
  
  Then run this command:
  
  <pre>jsbuild --manifest MANIFEST --root ROOT [OPTIONS] module1 [module2 ...]</pre>
  
  The options available are:
  
  * @--manifest@, @-m@: the path to your package manifest. If you only want to
    use modules from JS.Class itself, this is optional.
  * @--root@, @-r@: the directory containing your application's JavaScript files.
  * @--external@, @-e@: unless this option is passed, the build will skip files
    that come from external domains rather than the filesystem.
  * @--no-packages@, @-P@: if this is set, the @JS.Packages@ system will not be
    included in the build. Including it means your @JS.require()@ calls will
    carry on working.
  
  For example to build a single package to support our application, we can run
  this command to produce a single script containing @JS.Packages@, @jQuery@ and
  @Application@, since @Application@ depends on @jQuery@:
  
  <pre>jsbuild --manifest public/javascript/manifest.js \
          --root public/javascript/ \
          --external \
          Application</pre>
  
  The resulting script is printed to stdout. Note that @jsbuild@ does not do
  any minification of the files your provide, it simply locates the required
  modules and concatenates them. You should deal with minifying the resulting
  file separately.
  
  If you just want to build a file containing parts of JS.Class you want to use,
  run @jsbuild@ with the names of the required modules:
  
  <pre>jsbuild JS.Set JS.Deferrable</pre>
